// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace NebulaEngine
{
    namespace Platforms
    {
        public unsafe partial class Window : IDisposable
        {
            [StructLayout(LayoutKind.Sequential, Size = 4)]
            public partial struct __Internal
            {
                internal uint m_ID;

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Platform.dll", EntryPoint = "??0Window@Platforms@NebulaEngine@@QEAA@I@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr ctor(__IntPtr __instance, uint id);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Platform.dll", EntryPoint = "??0Window@Platforms@NebulaEngine@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr ctor(__IntPtr __instance);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Platform.dll", EntryPoint = "??0Window@Platforms@NebulaEngine@@QEAA@AEBV012@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Platform.dll", EntryPoint = "?SetFullScreen@Window@Platforms@NebulaEngine@@QEBAX_N@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SetFullScreen(__IntPtr __instance, bool isFullScreen);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Platform.dll", EntryPoint = "?SetCaption@Window@Platforms@NebulaEngine@@QEBAXPEB_W@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SetCaption(__IntPtr __instance, [MarshalAs(UnmanagedType.LPWStr)] string caption);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Platform.dll", EntryPoint = "?Resize@Window@Platforms@NebulaEngine@@QEBAXII@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void Resize(__IntPtr __instance, uint width, uint height);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Platform.dll", EntryPoint = "?ID@Window@Platforms@NebulaEngine@@QEBAIXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern uint ID(__IntPtr __instance);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Platform.dll", EntryPoint = "?IsValid@Window@Platforms@NebulaEngine@@QEBA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool IsValid(__IntPtr __instance);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Platform.dll", EntryPoint = "?IsFullScreen@Window@Platforms@NebulaEngine@@QEBA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool IsFullScreen(__IntPtr __instance);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Platform.dll", EntryPoint = "?Handle@Window@Platforms@NebulaEngine@@QEBAPEAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr Handle(__IntPtr __instance);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Platform.dll", EntryPoint = "?Width@Window@Platforms@NebulaEngine@@QEBAIXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern uint Width(__IntPtr __instance);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Platform.dll", EntryPoint = "?Height@Window@Platforms@NebulaEngine@@QEBAIXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern uint Height(__IntPtr __instance);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Platform.dll", EntryPoint = "?IsClosed@Window@Platforms@NebulaEngine@@QEBA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool IsClosed(__IntPtr __instance);
            }

            public __IntPtr __Instance { get; protected set; }

            internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NebulaEngine.Platforms.Window> NativeToManagedMap =
                new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NebulaEngine.Platforms.Window>();

            internal static void __RecordNativeToManagedMapping(IntPtr native, global::NebulaEngine.Platforms.Window managed)
            {
                NativeToManagedMap[native] = managed;
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NebulaEngine.Platforms.Window managed)
            {
    
                return NativeToManagedMap.TryGetValue(native, out managed);
            }

            protected bool __ownsNativeInstance;

            internal static Window __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                return new Window(native.ToPointer(), skipVTables);
            }

            internal static Window __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (Window)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static Window __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new Window(native, skipVTables);
            }

            private static void* __CopyValue(__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                *(__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Window(__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            protected Window(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new __IntPtr(native);
            }

            public Window(uint id)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::NebulaEngine.Platforms.Window.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                __Internal.ctor(__Instance, id);
            }

            public Window()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::NebulaEngine.Platforms.Window.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                __Internal.ctor(__Instance);
            }

            public Window(global::NebulaEngine.Platforms.Window _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::NebulaEngine.Platforms.Window.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                *((global::NebulaEngine.Platforms.Window.__Internal*) __Instance) = *((global::NebulaEngine.Platforms.Window.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            }

            partial void DisposePartial(bool disposing);

            internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
            {
                if (__Instance == IntPtr.Zero)
                    return;
                NativeToManagedMap.TryRemove(__Instance, out _);
                DisposePartial(disposing);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public void SetFullScreen(bool isFullScreen)
            {
                __Internal.SetFullScreen(__Instance, isFullScreen);
            }

            public void SetCaption(string caption)
            {
                __Internal.SetCaption(__Instance, caption);
            }

            public void Resize(uint width, uint height)
            {
                __Internal.Resize(__Instance, width, height);
            }

            public static explicit operator global::NebulaEngine.Platforms.Window(uint id)
            {
                return new global::NebulaEngine.Platforms.Window(id);
            }

            public uint ID
            {
                get
                {
                    var ___ret = __Internal.ID(__Instance);
                    return ___ret;
                }
            }

            public bool IsValid
            {
                get
                {
                    var ___ret = __Internal.IsValid(__Instance);
                    return ___ret;
                }
            }

            public bool IsFullScreen
            {
                get
                {
                    var ___ret = __Internal.IsFullScreen(__Instance);
                    return ___ret;
                }
            }

            public __IntPtr Handle
            {
                get
                {
                    var ___ret = __Internal.Handle(__Instance);
                    return ___ret;
                }
            }

            public uint Width
            {
                get
                {
                    var ___ret = __Internal.Width(__Instance);
                    return ___ret;
                }
            }

            public uint Height
            {
                get
                {
                    var ___ret = __Internal.Height(__Instance);
                    return ___ret;
                }
            }

            public bool IsClosed
            {
                get
                {
                    var ___ret = __Internal.IsClosed(__Instance);
                    return ___ret;
                }
            }
        }
    }
}
