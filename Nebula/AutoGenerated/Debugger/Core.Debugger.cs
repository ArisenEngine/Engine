// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace NebulaEngine
{
    namespace Debugger
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void LogCallback(uint __0, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string __1, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string __2, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string __3);

        public unsafe partial class Logger : IDisposable
        {
            [StructLayout(LayoutKind.Sequential, Size = 16)]
            public partial struct __Internal
            {
                internal byte m_IsInitialize;
                internal __IntPtr m_LogCallback;

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Debugger.dll", EntryPoint = "?Log@Logger@Debugger@NebulaEngine@@QEAAXPEBD00@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void Log(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string msg, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string thread_name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string cs_trace);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Debugger.dll", EntryPoint = "?Info@Logger@Debugger@NebulaEngine@@QEAAXPEBD00@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void Info(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string msg, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string thread_name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string cs_trace);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Debugger.dll", EntryPoint = "?Warning@Logger@Debugger@NebulaEngine@@QEAAXPEBD00@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void Warning(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string msg, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string thread_name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string cs_trace);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Debugger.dll", EntryPoint = "?Error@Logger@Debugger@NebulaEngine@@QEAAXPEBD00@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void Error(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string msg, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string thread_name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string cs_trace);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Debugger.dll", EntryPoint = "?Fatal@Logger@Debugger@NebulaEngine@@QEAAXPEBD00@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void Fatal(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string msg, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string thread_name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string cs_trace);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Debugger.dll", EntryPoint = "?Trace@Logger@Debugger@NebulaEngine@@QEAAXPEBD00@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void Trace(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string msg, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string thread_name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string cs_trace);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Debugger.dll", EntryPoint = "?SetServerityLevel@Logger@Debugger@NebulaEngine@@QEAAXW4LogLevel@123@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void SetServerityLevel(__IntPtr __instance, global::NebulaEngine.Debugger.Logger.LogLevel level);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Debugger.dll", EntryPoint = "?BindCallback@Logger@Debugger@NebulaEngine@@QEAAXP6AXIPEBD00@Z@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void BindCallback(__IntPtr __instance, __IntPtr callback);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Debugger.dll", EntryPoint = "?Initialize@Logger@Debugger@NebulaEngine@@QEAA_NXZ", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool Initialize(__IntPtr __instance);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Debugger.dll", EntryPoint = "?Shutdown@Logger@Debugger@NebulaEngine@@SAXXZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern void Shutdown();

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Debugger.dll", EntryPoint = "?GetInstance@Logger@Debugger@NebulaEngine@@SAAEAV123@XZ", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr GetInstance();
            }

            [Flags]
            public enum LogLevel : byte
            {
                Trace = 0x1,
                Log = 0x2,
                Info = 0x4,
                Warning = 0x8,
                Error = 0x10,
                Fatal = 0x20
            }

            public __IntPtr __Instance { get; protected set; }

            internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NebulaEngine.Debugger.Logger> NativeToManagedMap =
                new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NebulaEngine.Debugger.Logger>();

            internal static void __RecordNativeToManagedMapping(IntPtr native, global::NebulaEngine.Debugger.Logger managed)
            {
                NativeToManagedMap[native] = managed;
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::NebulaEngine.Debugger.Logger managed)
            {
    
                return NativeToManagedMap.TryGetValue(native, out managed);
            }

            protected bool __ownsNativeInstance;

            internal static Logger __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                return new Logger(native.ToPointer(), skipVTables);
            }

            internal static Logger __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (Logger)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static Logger __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new Logger(native, skipVTables);
            }

            private static void* __CopyValue(__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                *(__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Logger(__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            protected Logger(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new __IntPtr(native);
            }

            public void Dispose()
            {
                Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            }

            partial void DisposePartial(bool disposing);

            internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
            {
                if (__Instance == IntPtr.Zero)
                    return;
                NativeToManagedMap.TryRemove(__Instance, out _);
                DisposePartial(disposing);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public void Log(string msg, string thread_name, string cs_trace)
            {
                __Internal.Log(__Instance, msg, thread_name, cs_trace);
            }

            public void Info(string msg, string thread_name, string cs_trace)
            {
                __Internal.Info(__Instance, msg, thread_name, cs_trace);
            }

            public void Warning(string msg, string thread_name, string cs_trace)
            {
                __Internal.Warning(__Instance, msg, thread_name, cs_trace);
            }

            public void Error(string msg, string thread_name, string cs_trace)
            {
                __Internal.Error(__Instance, msg, thread_name, cs_trace);
            }

            public void Fatal(string msg, string thread_name, string cs_trace)
            {
                __Internal.Fatal(__Instance, msg, thread_name, cs_trace);
            }

            public void Trace(string msg, string thread_name, string cs_trace)
            {
                __Internal.Trace(__Instance, msg, thread_name, cs_trace);
            }

            public void SetServerityLevel(global::NebulaEngine.Debugger.Logger.LogLevel level)
            {
                __Internal.SetServerityLevel(__Instance, level);
            }

            public void BindCallback(global::NebulaEngine.Debugger.LogCallback callback)
            {
                var __arg0 = callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
                __Internal.BindCallback(__Instance, __arg0);
            }

            public bool Initialize()
            {
                var ___ret = __Internal.Initialize(__Instance);
                return ___ret;
            }

            public static void Shutdown()
            {
                __Internal.Shutdown();
            }

            public static global::NebulaEngine.Debugger.Logger Instance
            {
                get
                {
                    var ___ret = __Internal.GetInstance();
                    var __result0 = global::NebulaEngine.Debugger.Logger.__GetOrCreateInstance(___ret, false);
                    return __result0;
                }
            }
        }
    }
}

namespace NebulaEngine
{
    namespace Containers
    {
    }
}

namespace NebulaEngine
{
    namespace ID
    {
        public unsafe partial class Id
        {
            public partial struct __Internal
            {
                [SuppressUnmanagedCodeSecurity, DllImport("Core.Debugger.dll", EntryPoint = "?IsValid@ID@NebulaEngine@@YA_NI@Z", CallingConvention = __CallingConvention.Cdecl)]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool IsValid(uint id);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Debugger.dll", EntryPoint = "?Index@ID@NebulaEngine@@YAII@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern uint Index(uint id);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Debugger.dll", EntryPoint = "?Generation@ID@NebulaEngine@@YAII@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern uint Generation(uint id);

                [SuppressUnmanagedCodeSecurity, DllImport("Core.Debugger.dll", EntryPoint = "?NewGeneration@ID@NebulaEngine@@YAII@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern uint NewGeneration(uint id);
            }

            public static bool IsValid(uint id)
            {
                var ___ret = __Internal.IsValid(id);
                return ___ret;
            }

            public static uint Index(uint id)
            {
                var ___ret = __Internal.Index(id);
                return ___ret;
            }

            public static uint Generation(uint id)
            {
                var ___ret = __Internal.Generation(id);
                return ___ret;
            }

            public static uint NewGeneration(uint id)
            {
                var ___ret = __Internal.NewGeneration(id);
                return ___ret;
            }

            public const uint InvalidID = 4294967295;        }

        namespace Internal
        {
            public unsafe partial class Id
            {
                public partial struct __Internal
                {
                }

                public const uint GenerationBits = 8;
                public const uint IndexBits = 24;
                public const uint IndexMask = 16777215;
                public const uint GenerationMask = 255;            }
        }
    }
}

namespace NebulaEngine
{
    namespace Math
    {
    }
}

namespace NebulaEngine
{
    public unsafe partial class PrimitiveTypes
    {
        public partial struct __Internal
        {
        }

        public const ulong U64Invalid = 18446744073709551615;
        public const uint U32Invalid = 4294967295;
        public const ushort U16Invalid = 65535;
        public const byte U8Invalid = 255;    }
}
