using CppSharp;
using CppSharp.AST;
using CppSharp.Generators;

namespace CSharpBindingGenerator;

public class PlatformLibrary : ILibrary
{
    public void Preprocess(Driver driver, ASTContext ctx)
    {
        // 查找 WindowInitInfo 类
        var windowInitInfoClass = ctx.FindCompleteClass("WindowInitInfo");

        if (windowInitInfoClass != null)
        {
            // 查找并忽略 operator= 重载
            foreach (var op in windowInitInfoClass.Operators)
            {
                if (op.Name == "operator=")
                {
                    op.Ignore = true;
                }
            }
        }
        
        var windowClass = ctx.FindCompleteClass("Window");

        if (windowClass != null)
        {
            // 查找并忽略 operator= 重载
            foreach (var op in windowClass.Operators)
            {
                if (op.Name == "operator=")
                {
                    op.Ignore = true;
                }
            }
        }
        
        // 遍历所有命名空间并忽略 std
        foreach (var unit in ctx.TranslationUnits)
        {
            foreach (var ns in unit.Namespaces)
            {
                if (ns.Name == "std")
                {
                    ns.Ignore = true;
                }
            }
        }
    }

    public void Postprocess(Driver driver, ASTContext ctx)
    {
        // throw new NotImplementedException();
    }

    public void Setup(Driver driver)
    {
        driver.ParserOptions.Setup(TargetPlatform.Windows);
        driver.ParserOptions.AddIncludeDirs(@"../../../../Core/Core.Infra/");
        driver.ParserOptions.AddIncludeDirs( @"../../../../Core/Core.Debugger/");
        driver.ParserOptions.AddIncludeDirs( @"../../../../Core/Core.Platform/");
        var options = driver.Options;
        options.GenerationOutputMode = GenerationOutputMode.FilePerUnit;
        options.OutputDir = @"../../../../AutoGenerated/Platform";
        options.GeneratorKind = GeneratorKind.CSharp;
        // options.Verbose = true;
        // options.Compilation.DebugMode = true;
        // options.CheckSymbols = true;
        var module = options.AddModule("Core.Platform");
        module.OutputNamespace = "";
        module.Headers.Add(@"/Windows/RenderWindowAPI.h");
        module.LibraryDirs.Add(@"../../../../x64/Debug");
        module.Libraries.Add(@"Core.Platform.lib");
        
    }

    public void SetupPasses(Driver driver)
    {
       
    }
}